import datetime
from math import ceil
import itertools
import math


# todo 1) Написать проверку на повторяющиеся комбинации ГОТОВО


def f(a, b, c, k):
    """
    Возвращает количество кубов, необходимое для покрытия фигуры слоя n
    a, b, c - грани исходного параллелепипеда
    k - количество наложенных слоев на базовую фигуру
    """

    # количество кубов, необходимое для покрытия базовой площади
    sum_base = (a*b + b*c + c*a)*2

    # количество кубов, добавляемых к ребрам
    # sum_edge = (a+b+c) * 4 * k + (k - 1)*8
    sum_edge = ((a+b+c) + (k - 1)) * 4 * k

    return sum_base + sum_edge


def entry_check(a, b, c):
    """Получает на вход размеры фигуры и проверет, не была ли она уже проверена в другой ориентации.
    Возвращает:
    True - если проверяется впервые
    False - если фигура раньше встречалась"""

    my_list = itertools.permutations((a, b, c))
    for i in my_list:
        if i in inner_set_for_check:
            return False
    return True


def square_solution(a, b, c):
    """Решает квадратное уравнение. Возвращает МНОЖЕСТВО (set() ) положительных решений."""
    if b**2 - 4*a*c >= 0:
        discr = math.sqrt(b**2 - 4*a*c)
        x1 = round(-b + discr/(2*a))
        x2 = round(-b - discr/(2*a))
        answer = set()
        if x1 > 0:
            answer.add(x1)
        if x2 > 0:
            answer.add(x2)
        return answer
    else:
        return {}


# максимальное количество слоев, которе надо рассматривать
max_layers = 12

# область поиска кубиков
n_min = 500
n_max = 500

# число параллелепипедов, содержащих k кубов в одном из своих слоев
res = 1000

# массив комбинаций (a, b, c, n)
massive_list = []

start = datetime.datetime.now()

# количесвто подходящих комбинаций для данного k
max_count = 0

# значение k, при котором достигнуто max_count
max_count_n = 0

answer = 0

print()

# n - потенциальное количество кубиков
for n in range(n_min, n_max + 1, 2):
    inner_set_for_check = set()  # множество комбинаций {(a, b, c)} для каждого n, как можеств для пропуска дубликатов
    inner_massive_as_list = []    # внутренний массив комбтнаций (a, b, c, n) в виде листа
    count = 0

    # перебор комбинаций паралеллепипедов для каждого k

    # a_max, b_max, c_max оцениваем из условия, что при фиксированном n a максимально при (a_max, 1, 1)
    # тогда n = a_max*f + 2. Выражаем а_max с округлением вверх до целых.
    a_max = ceil((n - 2) / 4)
    b_max = a_max
    c_max = a_max

    for a in range(1, a_max + 1):
        for b in range(a, b_max + 1):
            for c in range(a, c_max + 1):
                a_ = 4
                b_ = 4*(a+b+c-1)
                c_ = 2*(a*b+b*c+c*a)-n
                for k in square_solution(a_, b_, c_):
                    # прогрессбар
                    progress = round((n - n_min) / (n_max + 1 - n_min) * 100, 1)
                    print("\rПрогресс: " + str(progress) + "%",
                          "(" + str(a) + ", " + str(b) + ", " + str(c) + ", " + str(k) + ")  " + "k = " + str(n),
                          end="")

                    if f(a, b, c, k) == n:
                        if entry_check(a, b, c):
                            inner_set_for_check.add((a, b, c))
                            inner_massive_as_list.append((a, b, c, k))
                            count = count + 1
                            break

    if count > max_count:
        max_count = count
        max_count_n = n
        massive_list = inner_massive_as_list[:]

    if count == res:
        answer = n
        break


finish = datetime.datetime.now()
ellapsed_time = finish - start

print()
print("\nВычисления закончены и заняли ", ellapsed_time.seconds, "секунд.")

if answer != 0:
    print("C(" + str(answer) + ") = " + str(res))
else:
    print("Максимальное количество комбинаций = " + str(max_count) + " при k = " + str(max_count_n))

for i in massive_list:
    print(massive_list.index(i) + 1, i)

# count = 0
# for item in massive_list:
#     count = count + 1
#     print("\n", count, item)


# Вычисления закончены и заняли  175 секунд.
# C(154) = 10
# 0 (1, 1, 18, 1)
# 1 (1, 1, 38, 0)
# 2 (1, 2, 5, 3)
# 3 (1, 2, 25, 0)
# 4 (1, 3, 11, 1)
# 5 (1, 4, 9, 1)
# 6 (1, 5, 12, 0)
# 7 (2, 7, 7, 0)
# 8 (3, 3, 4, 2)
# 9 (3, 3, 7, 1)

# Вычисления закончены и заняли  3 секунд.
# C(154) = 10
# 1 (1, 1, 18, 1)
# 2 (1, 1, 38, 0)
# 3 (1, 2, 5, 3)
# 4 (1, 2, 25, 0)
# 5 (1, 3, 11, 1)
# 6 (1, 4, 9, 1)
# 7 (1, 5, 12, 0)
# 8 (2, 7, 7, 0)
# 9 (3, 3, 4, 2)
# 10 (3, 3, 7, 1)

# Вычисления закончены и заняли  186 секунд.
# Максимальное количество комбинаций =3 при k = 156
# 0 (1, 2, 14, 1)
# 1 (2, 2, 11, 1)
# 2 (2, 5, 6, 1)

# Вычисления закончены и заняли  582 секунд.
# Максимальное количество комбинаций = 45 при k = 1200
# 1 (1, 2, 50, 4)
# 2 (2, 2, 45, 4)
# 3 (2, 2, 56, 3)
# 4 (2, 2, 72, 2)
# 5 (2, 2, 98, 1)
# 6 (2, 2, 149, 0)
# 7 (2, 5, 34, 4)
# 8 (2, 5, 64, 1)
# 9 (2, 6, 46, 2)
# 10 (2, 7, 42, 2)
# 11 (2, 8, 32, 3)
# 12 (2, 8, 47, 1)
# 13 (2, 10, 23, 4)
# 14 (2, 10, 33, 2)
# 15 (2, 12, 20, 4)
# 16 (2, 12, 24, 3)
# 17 (2, 13, 32, 1)
# 18 (2, 14, 30, 1)
# 19 (2, 18, 20, 2)
# 20 (3, 4, 84, 0)
# 21 (3, 12, 22, 3)
# 22 (3, 18, 26, 0)
# 23 (4, 4, 31, 4)
# 24 (4, 4, 73, 0)
# 25 (4, 6, 38, 2)
# 26 (4, 7, 52, 0)
# 27 (4, 10, 40, 0)
# 28 (4, 15, 20, 2)
# 29 (4, 18, 24, 0)
# 30 (5, 20, 20, 0)
# 31 (6, 6, 32, 2)
# 32 (6, 6, 47, 0)
# 33 (6, 11, 22, 2)
# 34 (6, 12, 17, 3)
# 35 (6, 14, 18, 2)
# 36 (7, 14, 20, 1)
# 37 (8, 8, 16, 4)
# 38 (8, 8, 28, 1)
# 39 (8, 9, 18, 3)
# 40 (8, 9, 26, 1)
# 41 (9, 14, 14, 2)
# 42 (10, 10, 25, 0)
# 43 (10, 12, 12, 3)
# 44 (10, 15, 18, 0)
# 45 (12, 12, 19, 0)

# Вычисления закончены и заняли  2286 секунд.
# Максимальное количество комбинаций = 34 при k = 1500
# 1 (1, 4, 64, 3)
# 2 (1, 8, 38, 4)
# 3 (1, 8, 54, 2)
# 4 (2, 2, 71, 3)
# 5 (2, 2, 123, 1)
# 6 (2, 3, 80, 2)
# 7 (2, 5, 44, 4)
# 8 (2, 8, 35, 4)
# 9 (2, 11, 56, 0)
# 10 (2, 12, 13, 8)
# 11 (2, 12, 37, 2)
# 12 (2, 17, 20, 4)
# 13 (2, 24, 27, 0)
# 14 (3, 8, 66, 0)
# 15 (3, 20, 22, 2)
# 16 (3, 20, 30, 0)
# 17 (4, 12, 27, 3)
# 18 (5, 6, 16, 8)
# 19 (5, 6, 32, 4)
# 20 (5, 10, 14, 7)
# 21 (5, 20, 26, 0)
# 22 (6, 6, 35, 3)
# 23 (6, 9, 24, 4)
# 24 (7, 10, 34, 1)
# 25 (7, 10, 40, 0)
# 26 (8, 10, 27, 2)
# 27 (8, 11, 18, 4)
# 28 (8, 14, 21, 2)
# 29 (8, 14, 29, 0)
# 30 (9, 10, 12, 6)
# 31 (10, 11, 26, 1)
# 32 (10, 15, 24, 0)
# 33 (11, 14, 14, 3)
# 34 (12, 12, 15, 3)
